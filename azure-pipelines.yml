pool: 
    vmImage: 'ubuntu-latest'
variables:
  group: Pipeline variables
  tfBackendFileName: terraform.tfstate
stages:
- stage: Build
  jobs:
    - job: build
      steps:
        - task: TerraformInstaller@0
          inputs:
            terraformVersion: '0.14.6'
        - script:  az login -u '$userlogin_name' -p '$userlogin_password'
          displayName: "Log Into Azure"
        
        - script: terraform init -backend-config="storage_account_name=$(StorageAccountName)" -backend-config="container_name=$(ContainerName)" -backend-config="access_key=$(storageaccesskey)" -backend-config="key=$(tfBackendFileName)"
          displayName: "Terraform init"
          
        - script: terraform plan -var="subscription_id=$(subscription_id)" -var="tenant_id=$(tenant_id)" -var="client_id=$client_id" -var="client_secret=$client_secret" --out -no-color tfplan.output     
          displayName: "Terraform plan"   
        - task: CmdLine@2
          displayName: "OPA checks"
          inputs:
            script: |    
               curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
               chmod 755 opa
               terraform show -json tfplan.output > tfplancomplete.json
               sudo apt-get install jq
               jq -r ".resource_changes | map ({(.address|tostring) : .}) | add" tfplancomplete.json > tfplan.json
               cat tfplan.json
               echo "#############     OPA checks         ###############" 
               ./opa eval --fail-defined --data azurerules.rego --input tfplan.json "data.azurerules.nsg_rule" > oparesult.json
               cat oparesult.json
        - task: PowerShell@2
          displayName: OPA - Terraform apply
          inputs:
            targetType: 'inline'
            script: |
                # Write your PowerShell commands here.
                $resultvalue = $(./opa eval --fail-defined --data azurerules.rego --input tfplan.json "data.azurerules.nsg_rule" | convertFrom-Json).result.expressions.value
                Write-Host "result value : $resultvalue"
                if ($resultvalue -like 'False')
                {
                  Write-Host "Terraform will not perform apply"
                }
                else
                {
                  Write-Host "Terraform apply"
                  terraform apply "tfplan.output"
                }
